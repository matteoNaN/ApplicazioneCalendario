@using MudBlazor
@inherits LayoutComponentBase
@inject NavigationManager _navManager
@inject JwtAuthenticationStateProvider _jwtAuthenticationStateProvider

@if (isLogged)
{
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4 auth">
                @* Required *@

                <LoginDisplay />
                <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
            </div>

            <article class="content px-4">
                @Body
                <MudPopoverProvider />
                <MudThemeProvider />


                @* Needed for dialogs *@
                <MudDialogProvider />

                @* Needed for snackbars *@
                <MudSnackbarProvider />
            </article>
        </main>
    </div>
}
else if (!isLogged && IsLoginPage())
{
    <Login></Login>

}else if (!isLogged && IsRegisterPage())
{
    <Register></Register>
}

@code {
    private bool isLogged = false;

    protected async override Task OnInitializedAsync()
    {
        var user = (await _jwtAuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        isLogged = user.Identity is not null && user.Identity.IsAuthenticated;

        Console.WriteLine("Stato di autenticazione: " + isLogged);

        // Esegui il controllo di login solo se non sei già nella pagina di login o registrazione
        if (!isLogged && !IsLoginPage() && !IsRegisterPage())
        {
            _navManager.NavigateTo("/login");
        }
    }

    private bool IsLoginPage()
    {
        var currentUrl = _navManager.Uri.ToLower();
        return currentUrl.Contains("/login");
    }

    private bool IsRegisterPage()
    {
        var currentUrl = _navManager.Uri.ToLower();
        return currentUrl.Contains("/register");
    }
}
