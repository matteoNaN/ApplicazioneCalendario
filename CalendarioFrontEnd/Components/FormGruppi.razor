@using CalendarioFrontEnd.Services.Http
@using CalendarioFrontEnd.Utilities
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using SharedLibrary.DTOs
@inject GruppiHttpClass _gruppiService
@inject NavigationManager NavigationManager


<h3>Crea un Nuovo Gruppo</h3>

<EditForm Model="@Gruppoo" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Name">Nome Gruppo</label>
        <InputText id="Name" class="form-control" @bind-Value="Gruppoo.Name" />
        <ValidationMessage For="@(() => Gruppoo.Name)" />
    </div>

    <div class="form-group">
        <label for="Description">Descrizione</label>
        <InputTextArea id="Description" class="form-control" @bind-Value="Gruppoo.Description" />
        <ValidationMessage For="@(() => Gruppoo.Description)" />
    </div>

    <div class="button-container">
        <button type="submit" class="submit-button">Salva Gruppo</button>
    </div>
</EditForm>

@code {
    private CreazioneGruppoDTO Gruppoo { get; set; } = new CreazioneGruppoDTO();

    private async Task HandleSubmit()
    {
        try
        {
            // Logica per il salvataggio del gruppo
            Console.WriteLine($"Gruppo creato: {Gruppoo.Name} - {Gruppoo.Description}");

            var res = await _gruppiService.AggiungiGruppo(Gruppoo);
            var snackResult = ParseResultToSnackbar.Parse(res);

            Snackbar.Add(snackResult.Message, snackResult.Severity);

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
    }
}
