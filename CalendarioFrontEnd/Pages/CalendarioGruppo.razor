@page "/gruppi"
@using CalendarioFrontEnd.Services.Http
@using CalendarioFrontEnd.Utilities
@using Heron.MudCalendar
@using Microsoft.AspNetCore.SignalR.Client
@using SharedLibrary.DTOs
@using SharedLibrary.Helpers.Api
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject CalendarioHttpService _calendarioService
@inject NavigationManager NavigationManager


<MudCalendar Items="impegnoDTOs" CellClicked="CellClicked">
    <CellTemplate>
        <div style="width: 100%; height: 100%; border: 2px solid">
            <div class="pa-2"><MudText Typo="Typo.body2">@(((AggiungiImpegnoDTO)context).Name)</MudText></div>
        </div>
    </CellTemplate>
</MudCalendar>

<MudIconButton Icon="@Icons.Material.Filled.Add"
               Color="Color.Primary"
               Variant="Variant.Filled"
               Class="fab-button"
               Style="position: fixed; bottom: 24px; right: 24px; z-index: 100; width: 64px; height: 64px;"
               OnClick="() => HandleFormVisibility()" />

<BaseModale IsVisible="@_showModale" OnSave="@HandleSaveImpegno" OnClose="@(() => _showModale = false)">
    <FormImpegni @ref="_formImpegni" />
</BaseModale>



@code {


    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string _gruppiId { get; set; }

    public string GruppoId { get; set; }

    private HubConnection? hubConnection;

    private FormImpegni? _formImpegni;

    private string message = "";

    private bool _showModale = false;

    private bool _firstLoad = true;

    private CalendarioDTO? calendarioDTO = null;

    private List<AggiungiImpegnoDTO> impegnoDTOs = new List<AggiungiImpegnoDTO>();

    protected override async Task OnInitializedAsync()
    {
        if (_firstLoad)
        {
            await LoadData();
        }


        hubConnection.On<AggiungiImpegnoDTO>("ReceiveImpegnoUpdate", (newEvent) =>
    {
        impegnoDTOs.Add(newEvent);
        StateHasChanged();
    });
    }

    private async Task LoadData()
    {
        if (_gruppiId is null)
        {
            snackbar.Add("Errore: nessun gruppo trovato per questo calendario", Severity.Error);
            return;
        }

        var res = await _calendarioService.GetCalendarioGruppo(Guid.Parse(_gruppiId));

        if (res.IsSuccess is false)
        {
            var snackResult = ParseResultToSnackbar.Parse(res, "errore nella ricezione dei dati del calendario");

            Snackbar.Add(snackResult.Message, snackResult.Severity);
            return;
        }

        calendarioDTO = res.Data;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(ControllerConstants.ApiUrl + "gruppohub")
            .Build();

        hubConnection.On<string>("ReceiveUpdate", (msg) =>
        {
            message = msg;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGroup", _gruppiId);

        GruppoId = _gruppiId;
        _firstLoad = false;

        NavigationManager.NavigateTo(NavigationManager.BaseUri + "gruppi", replace: true);


    }

    private async Task HandleSaveImpegno()
    {
        if (_formImpegni is null)
        {
            return;
        }

        var res = await _formImpegni.HandleSubmit(GruppoId);



        if (!res.IsSuccess)
        {
            return;
        }

        impegnoDTOs.Add(res.Data);
        await hubConnection.SendAsync("AddImpegno", GruppoId, res.Data);

        OnFormSaved();




    }

    private void OnFormSaved()
    {
        _showModale = false; // Chiudi il modale dopo il salvataggio
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveGroup", _gruppiId);
            await hubConnection.DisposeAsync();
        }
    }

    private void HandleFormVisibility()
    {
        _showModale = !_showModale;
        return;
    }

    private void CellClicked()
    {

    }

}
