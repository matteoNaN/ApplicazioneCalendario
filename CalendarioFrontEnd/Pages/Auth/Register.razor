

@page "/register"
@using System.ComponentModel.DataAnnotations
@using CalendarioFrontEnd.Auth
@using SharedLibrary.DTOs.Auth
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <img src="https://cdn-icons-png.flaticon.com/512/9131/9131529.png"
                 alt="Register Icon"
                 class="user-icon" />
            <h3 class="login-title">Crea il tuo account</h3>

        </div>

        <EditForm Model="@registerModel" OnValidSubmit="@HandleRegistration" class="mt-4">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label class="form-label">Indirizzo Email</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-envelope"></i>
                    </span>
                    <InputText @bind-Value="registerModel.Email"
                               class="form-control"
                               placeholder="Inserisci la tua Email" />
                </div>
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="form-group mt-3">
                <label class="form-label">Password</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-lock"></i>
                    </span>
                    <InputText type="password"
                               @bind-Value="registerModel.Password"
                               class="form-control"
                               placeholder="••••••••" />
                </div>
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <div class="form-group mt-3">
                <label class="form-label">Conferma Password</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-check-circle"></i>
                    </span>
                    <InputText type="password"
                               @bind-Value="registerModel.ConfirmPassword"
                               class="form-control"
                               placeholder="••••••••" />
                </div>
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            @if (registrationError is not null)
            {
                <div class="alert alert-danger mt-3 d-flex align-items-center">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <div>@registrationError</div>
                </div>
            }

            <button type="submit"
                    class="btn btn-primary w-100 mt-4 login-btn"
                    disabled="@isProcessing">
                @if (isProcessing)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                else
                {
                    <i class="bi bi-person-plus me-2"></i>
                }
                Crea Account
            </button>
        </EditForm>

        <div class="text-center mt-4">
            <span class="text-muted">Hai già un account ? </span>
            <a href="/login" class="text-decoration-none">Login</a>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool isProcessing = false;
    private string? registrationError;

    private async Task HandleRegistration()
    {
        isProcessing = true;
        registrationError = null;

        try
        {
            // Usa il client nominato "PublicAPI"
            var httpClient = HttpClientFactory.CreateClient("PublicAPI");

            var response = await httpClient.PostAsJsonAsync("Auth/Register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login?registrationSuccess=true");
            }
            else
            {
                var errorContent = await response.Content.ReadFromJsonAsync<ApiErrorResponse>();
                registrationError = errorContent?.Errors?.FirstOrDefault() ?? "Errore durante la registrazione";
            }
        }
        catch (Exception ex)
        {
            var detailedError = ex is HttpRequestException hre ?
                $"Status: {hre.StatusCode}, Message: {hre.Message}" :
                ex.Message;

            registrationError = $"Errore di connessione: {detailedError}";
            Console.WriteLine($"Full error: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    public class ApiErrorResponse
    {
        public List<string>? Errors { get; set; }
    }
}